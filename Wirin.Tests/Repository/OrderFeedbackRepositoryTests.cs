using Xunit;
using Microsoft.EntityFrameworkCore;
using Wirin.Infrastructure.Context;
using Wirin.Infrastructure.Entities;
using Wirin.Infrastructure.Repositories;
using Wirin.Infrastructure.Transformers;
using Wirin.Domain.Models;
using System.Threading.Tasks;
using System.Linq;
using System.Collections.Generic;

namespace Wirin.Tests.Repository
{
    public class OrderFeedbackRepositoryTests
    {
        private async Task<WirinDbContext> GetDbContext()
        {
            var options = new DbContextOptionsBuilder<WirinDbContext>()
                .UseInMemoryDatabase(databaseName: Guid.NewGuid().ToString())
                .Options;
            var dbContext = new WirinDbContext(options);
            await dbContext.Database.EnsureCreatedAsync();
            return dbContext;
        }

        [Fact]
        public async Task GetAllAsync_ReturnsAllOrderFeedbacks()
        {
            // Arrange
            var dbContext = await GetDbContext();
            dbContext.OrderFeedbacks.Add(new OrderFeedbackEntity { Id = 1, StudentId = "student1", FeedbackText = "Great!", Stars = 5, OrderId = 101 });
            dbContext.OrderFeedbacks.Add(new OrderFeedbackEntity { Id = 2, StudentId = "student2", FeedbackText = "Good!", Stars = 4, OrderId = 102 });
            await dbContext.SaveChangesAsync();
            var repository = new OrderFeedbackRepository(dbContext);

            // Act
            var result = await repository.GetAllAsync();

            // Assert
            Assert.NotNull(result);
            Assert.Equal(2, result.Count());
            Assert.Contains(result, of => of.Id == 1);
            Assert.Contains(result, of => of.Id == 2);
        }

        [Fact]
        public async Task GetByIdAsync_ReturnsOrderFeedback_WhenFound()
        {
            // Arrange
            var dbContext = await GetDbContext();
            dbContext.OrderFeedbacks.Add(new OrderFeedbackEntity { Id = 1, StudentId = "student1", FeedbackText = "Great!", Stars = 5, OrderId = 101 });
            await dbContext.SaveChangesAsync();
            var repository = new OrderFeedbackRepository(dbContext);

            // Act
            var result = await repository.GetByIdAsync(1);

            // Assert
            Assert.NotNull(result);
            Assert.Equal(1, result.Id);
        }

        [Fact]
        public async Task GetByIdAsync_ReturnsNull_WhenNotFound()
        {
            // Arrange
            var dbContext = await GetDbContext();
            var repository = new OrderFeedbackRepository(dbContext);

            // Act
            var result = await repository.GetByIdAsync(99);

            // Assert
            Assert.Null(result);
        }

        [Fact]
        public async Task AddAsync_AddsNewOrderFeedback()
        {
            // Arrange
            var dbContext = await GetDbContext();
            var repository = new OrderFeedbackRepository(dbContext);
            var newOrderFeedback = new OrderFeedback { StudentId = "student3", FeedbackText = "Excellent!", Stars = 5, OrderId = 103 };

            // Act
            var result = await repository.AddAsync(newOrderFeedback);

            // Assert
            Assert.NotNull(result);
            Assert.True(result.Id > 0); // Id should be generated by DB
            var addedEntity = await dbContext.OrderFeedbacks.FindAsync(result.Id);
            Assert.NotNull(addedEntity);
            Assert.Equal("student3", addedEntity.StudentId);
        }

        [Fact]
        public async Task UpdateAsync_UpdatesExistingOrderFeedback()
        {
            // Arrange
            var dbContext = await GetDbContext();
            var existingEntity = new OrderFeedbackEntity { Id = 1, StudentId = "student1", FeedbackText = "Old!", Stars = 3, OrderId = 101 };
            dbContext.OrderFeedbacks.Add(existingEntity);
            await dbContext.SaveChangesAsync();
            dbContext.Entry(existingEntity).State = EntityState.Detached; // Detach to simulate fresh context

            var repository = new OrderFeedbackRepository(dbContext);
            var updatedOrderFeedback = new OrderFeedback { Id = 1, StudentId = "student1", FeedbackText = "New!", Stars = 4, OrderId = 101 };

            // Act
            var result = await repository.UpdateAsync(updatedOrderFeedback);

            // Assert
            Assert.True(result);
            var entityInDb = await dbContext.OrderFeedbacks.FindAsync(1);
            Assert.NotNull(entityInDb);
            Assert.Equal("New!", entityInDb.FeedbackText);
            Assert.Equal(4, entityInDb.Stars);
        }

        [Fact]
        public async Task UpdateAsync_ReturnsFalse_WhenNotFound()
        {
            // Arrange
            var dbContext = await GetDbContext();
            var repository = new OrderFeedbackRepository(dbContext);
            var updatedOrderFeedback = new OrderFeedback { Id = 99, StudentId = "studentX", FeedbackText = "NonExistent!", Stars = 1, OrderId = 999 };

            // Act
            var result = await repository.UpdateAsync(updatedOrderFeedback);

            // Assert
            Assert.False(result);
        }

        [Fact]
        public async Task DeleteAsync_RemovesOrderFeedback()
        {
            // Arrange
            var dbContext = await GetDbContext();
            dbContext.OrderFeedbacks.Add(new OrderFeedbackEntity { Id = 1, StudentId = "student1", FeedbackText = "Great!", Stars = 5, OrderId = 101 });
            await dbContext.SaveChangesAsync();
            var repository = new OrderFeedbackRepository(dbContext);

            // Act
            var result = await repository.DeleteAsync(1);

            // Assert
            Assert.True(result);
            var deletedEntity = await dbContext.OrderFeedbacks.FindAsync(1);
            Assert.Null(deletedEntity);
        }

        [Fact]
        public async Task DeleteAsync_ReturnsFalse_WhenNotFound()
        {
            // Arrange
            var dbContext = await GetDbContext();
            var repository = new OrderFeedbackRepository(dbContext);

            // Act
            var result = await repository.DeleteAsync(99);

            // Assert
            Assert.False(result);
        }
    }
}